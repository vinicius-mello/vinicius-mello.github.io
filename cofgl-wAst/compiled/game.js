// Generated by CoffeeScript 1.8.0
(function() {
  var Game, allowedTime, distX, distY, elapsedTime, initEngineAndGame, keyMapping, restraint, root, startTime, startX, startY, swipedir, threshold, x,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  keyMapping = {
    40: 'break',
    38: 'thurst',
    37: 'rotateLeft',
    39: 'rotateRight',
    83: 'break',
    87: 'thurst',
    65: 'rotateLeft',
    68: 'rotateRight',
    32: 'fire'
  };

  swipedir = void 0;

  x = void 0;

  startX = void 0;

  startY = void 0;

  distX = void 0;

  distY = void 0;

  threshold = 150;

  restraint = 140;

  allowedTime = 500;

  elapsedTime = void 0;

  startTime = void 0;

  Game = (function() {
    var handleHit, magnitude, metric;

    function Game() {
      this.newWave = __bind(this.newWave, this);
      var action, code;
      this.actions = {};
      for (code in keyMapping) {
        action = keyMapping[code];
        this.actions[action] = false;
      }
    }

    Game.prototype.restart = function(geometry) {
      this.geometry = this.geometries[geometry];
      this.spaceShip = new cofgl.SpaceShip();
      this.bullets = [];
      this.asteroids = [];
      this.newWave();
      return this.world = new cofgl.World(this.spaceShip, this.asteroids, this.bullets);
    };

    Game.prototype.initGame = function() {
      var gl;
      this.processor = new cofgl.Processor(cofgl.resmgr.resources['shaders/postprocess']);
      this.geometries = {
        euclidean: {
          name: "euclidean",
          k: 0,
          shader: cofgl.resmgr.resources['shaders/euclidean'],
          step: cofgl.euclidTorusStep
        },
        elliptic: {
          name: "elliptic",
          k: 1,
          shader: cofgl.resmgr.resources['shaders/elliptic'],
          step: cofgl.kleinStep
        },
        hyperbolic: {
          name: "hyperbolic",
          k: -1,
          shader: cofgl.resmgr.resources['shaders/hyperbolic'],
          step: cofgl.poincareBitorusStep
        }
      };
      this.geometry = this.geometries.euclidean;
      this.spaceShip = new cofgl.SpaceShip();
      this.bullets = [];
      this.asteroids = [];
      this.newWave();
      this.world = new cofgl.World(this.spaceShip, this.asteroids, this.bullets, this.c);
      gl = cofgl.engine.gl;
      return gl.disable(gl.DEPTH_TEST);
    };

    Game.prototype.initEventHandlers = function() {
      return $(window).bind('keydown', (function(_this) {
        return function(event) {
          return _this.onKeyDown(event);
        };
      })(this)).bind('keyup', (function(_this) {
        return function(event) {
          return _this.onKeyUp(event);
        };
      })(this)).bind('touchstart', (function(_this) {
        return function(event) {
          return _this.onTouchStart(event);
        };
      })(this)).bind('touchend', (function(_this) {
        return function(event) {
          return _this.onTouchEnd(event);
        };
      })(this)).bind('touchcancel', (function(_this) {
        return function(event) {
          return _this.onTouchCancel(event);
        };
      })(this)).bind('touchleave', (function(_this) {
        return function(event) {
          return _this.onTouchLeave(event);
        };
      })(this)).bind('touchendMove', (function(_this) {
        return function(event) {
          return _this.onTouchMove(event);
        };
      })(this));
    };

    Game.prototype.onKeyDown = function(event) {
      var action;
      action = keyMapping[event.which];
      if (action != null) {
        this.actions[action] = true;
        return false;
      }
    };

    Game.prototype.onKeyUp = function(event) {
      var action;
      action = keyMapping[event.which];
      if (action === 'fire') {
        this.resetBulletCooldown();
      }
      if (action != null) {
        this.actions[action] = false;
        return false;
      }
    };

    Game.prototype.onTouchStart = function(event) {
      var dist, now, touchobj;
      event.preventDefault();
      touchobj = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
      x = touchobj.pageX - event.target.offsetLeft;
      if (x > $('#composite')[0].width / 2) {
        return this.fire(this.spaceShip, this.bullets);
      } else {
        swipedir = 'none';
        dist = 0;
        startX = touchobj.pageX;
        startY = touchobj.pageY;
        now = new Date;
        return startTime = now.getTime();
      }
    };

    Game.prototype.onTouchEnd = function(event) {
      var now, touchobj;
      event.preventDefault();
      if (x < $('#composite')[0].width / 2) {
        touchobj = event.originalEvent.changedTouches[0] || event.originalEvent.touches[0];
        distX = touchobj.pageX - startX;
        distY = touchobj.pageY - startY;
        now = new Date;
        elapsedTime = now.getTime() - startTime;
        if (elapsedTime <= allowedTime) {
          if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) {
            swipedir = distX < 0 ? 'left' : 'right';
          } else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) {
            swipedir = distY < 0 ? 'up' : 'down';
          }
        }
        switch (swipedir) {
          case 'up':
            return this.spaceShip.swipeThurst();
          case 'down':
            return this.spaceShip.swipeBreak();
          case 'left':
            return this.spaceShip.swipeLeft();
          case 'right':
            return this.spaceShip.swipeRight();
        }
      }
    };

    Game.prototype.onTouchCancel = function(event) {
      return event.preventDefault();
    };

    Game.prototype.onTouchLeave = function(event) {
      return event.preventDefault();
    };

    Game.prototype.onTouchMove = function(event) {
      return event.preventDefault();
    };

    Game.prototype.run = function() {
      return cofgl.resmgr.wait((function(_this) {
        return function() {
          _this.initGame();
          _this.initEventHandlers();
          return _this.mainloop();
        };
      })(this));
    };

    Game.prototype.mainloop = function() {
      return cofgl.engine.mainloop((function(_this) {
        return function(dt) {
          _this.updateGame(dt);
          _this.render();
          _this.updateUI(dt);
          return _this.compose();
        };
      })(this));
    };

    Game.prototype.updateGame = function(dt) {
      var asteroid, b, _i, _len, _ref, _ref1;
      this.checkCollision(this.spaceShip, this.asteroids, this.bullets);
      this.handleInput();
      _ref = this.asteroids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        asteroid = _ref[_i];
        asteroid.update(dt);
      }
      _ref1 = this.bullets;
      for (b in _ref1) {
        this.bullet = _ref1[b];
        if (this.bullet.faded) {
          this.bullets.splice(b, 1);
        } else {
          this.bullet.update(dt);
        }
      }
      this.spaceShip.update(dt);
      return this.world.update(dt);
    };

    Game.prototype.handleInput = function() {
      if (this.actions.rotateRight) {
        this.spaceShip.rotateRight();
      }
      if (this.actions.rotateLeft) {
        this.spaceShip.rotateLeft();
      }
      if (this.actions.thurst) {
        this.spaceShip.thurst();
      }
      if (this.actions["break"]) {
        this.spaceShip["break"]();
      }
      if (this.actions.fire) {
        return this.fire(this.spaceShip, this.bullets);
      }
    };

    Game.prototype.checkCollision = function(sp, as, blt) {
      var a, b, geo, k, r, _i, _len, _ref, _ref1, _ref2, _results;
      this.sp = sp;
      this.as = as;
      this.blt = blt;
      geo = $("input[name='geometry']:checked").val();
      k = this.geometries[geo].k;
      _ref = this.as;
      for (a in _ref) {
        this.asteroid = _ref[a];
        _ref1 = this.blt;
        for (b in _ref1) {
          this.bullet = _ref1[b];
          if (this.asteroid.radius > metric(this.asteroid.q, this.bullet.q, k)) {
            this.asteroid.hp = this.asteroid.hp - 1;
            this.sp.score = this.sp.score + 1;
            this.blt.splice(b, 1);
            if (this.asteroid.hp <= 0) {
              this.sp.score = this.sp.score + 10;
              this.divideAsteroid(this.asteroid, a);
            }
          }
        }
      }
      if (!this.sp.hit) {
        _ref2 = this.as;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          this.asteroid = _ref2[_i];
          r = this.asteroid.radius + this.sp.radius;
          r = Math.sqrt(r * r);
          if (r > metric(this.asteroid.q, this.sp.q, k)) {
            handleHit(geo, this.sp);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    Game.prototype.divideAsteroid = function(old, index) {
      var asteroid1, asteroid2;
      this.old = old;
      this.index = index;
      if (this.old.initial) {
        asteroid1 = new cofgl.Asteroid(this.old.q, {
          x: Math.random() / 2,
          y: Math.random() / 2
        }, false);
        asteroid2 = new cofgl.Asteroid(this.old.q, {
          x: Math.random() / 2,
          y: Math.random() / 2
        }, false);
        this.asteroids.push(asteroid1);
        this.asteroids.push(asteroid2);
      }
      this.asteroids.splice(this.index, 1);
      if (this.asteroids.length === 0) {
        return this.newWave();
      }
    };

    handleHit = function(geo, sp) {
      this.sp = sp;
      this.sp.hp = this.sp.hp - 1;
      if (this.sp.hp > 0) {
        this.sp.hit = true;
        return this.sp.hitShield();
      } else {
        return cofgl.game.restart(geo);
      }
    };

    metric = function(z1, z2, k) {
      var cOne, ck, d, z;
      ck = new cofgl.Complex(k, 0.0);
      cOne = new cofgl.Complex(1, 0);
      z = z1.minus(z2).divide(cOne.plus(z1.times(z2.conjugate()).times(ck)));
      z = Math.sqrt(z.magnitude);
      switch (k) {
        case -1:
          d = Math.atanh(z);
          break;
        case 0:
          d = z;
          break;
        case 1:
          d = Math.atan(z);
      }
      return d * 2;
    };

    Game.prototype.fire = function(sp, bullets) {
      var bullet, now;
      this.sp = sp;
      this.bullets = bullets;
      now = new Date();
      if (now.getTime() - this.sp.lastBulletTime >= this.sp.bulletCooldown) {
        if (this.sp.bulletsUsed < 10) {
          bullet = new cofgl.Bullet(this.sp.q, this.sp.p, this.sp.dir);
          this.bullets.push(bullet);
          this.sp.bulletsUsed = this.sp.bulletsUsed + 1;
          return this.sp.lastBulletTime = now.getTime();
        }
      }
    };

    Game.prototype.resetBulletCooldown = function() {
      this.sp.lastBulletTime = 0;
      return this.sp.bulletsUsed = 0;
    };

    magnitude = function(pa, pb) {
      var a, b, _ref;
      _ref = [(pa != null ? pa.x : void 0) - (pb != null ? pb.x : void 0), (pa != null ? pa.y : void 0) - (pb != null ? pb.y : void 0)], a = _ref[0], b = _ref[1];
      return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
    };

    Game.prototype.addAsteroid = function() {
      var asteroid, randomP, randomQ;
      randomQ = {
        x: (Math.random() < .5 ? -1 : 1) * (Math.random() * 0.2 + 0.4),
        y: (Math.random() < .5 ? -1 : 1) * (Math.random() * 0.2 + 0.4)
      };
      randomP = {
        x: Math.random() / 3,
        y: Math.random() / 3
      };
      asteroid = new cofgl.Asteroid(randomQ, randomP, true);
      return this.asteroids.push(asteroid);
    };

    Game.prototype.newWave = function() {
      var i, _i, _ref, _results;
      this.spaceShip.wave = this.spaceShip.wave + 1;
      _results = [];
      for (i = _i = 0, _ref = this.spaceShip.wave; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.addAsteroid());
      }
      return _results;
    };

    Game.prototype.render = function() {
      cofgl.clear();
      this.processor.push();
      this.world.draw();
      return this.processor.pop();
    };

    Game.prototype.compose = function() {
      var ctx;
      ctx = $('#composite')[0].getContext('2d');
      ctx.globalCompositeOperation = "source-over";
      ctx.drawImage($('#viewport')[0], 0, 0);
      return ctx.drawImage($('#gui')[0], 0, 0);
    };

    Game.prototype.updateUI = function(dt) {
      var gui, guiCanvas;
      guiCanvas = $('#gui')[0];
      gui = guiCanvas.getContext('2d');
      gui.clearRect(0, 0, guiCanvas.width, guiCanvas.height);
      gui.globalAlpha = 0.9;
      gui.fillStyle = "#f00";
      gui.font = "bold 16px sans-serif";
      gui.fillText("Lives: " + this.spaceShip.hp, 15, 20);
      gui.font = "bold 16px sans-serif";
      gui.fillText("Score", guiCanvas.width - 60, 20);
      gui.font = "bold 18px sans-serif";
      gui.fillText(this.spaceShip.score, guiCanvas.width - 60, 40);
      gui.font = "bold 16px sans-serif";
      gui.fillText("Wave: " + this.spaceShip.wave, guiCanvas.width - 80, guiCanvas.height - 20);
      if (this.spaceShip.hit) {
        gui.globalAlpha = 0.5;
        gui.fillStyle = "#000";
        gui.fillRect(guiCanvas.width / 2 - 90, guiCanvas.height - 25, 160, 20);
        gui.globalAlpha = 1.0;
        gui.fillStyle = "#00f";
        return gui.fillText("Go to a safe zone!", guiCanvas.width / 2 - 80, guiCanvas.height - 10);
      }
    };

    return Game;

  })();

  initEngineAndGame = function(selector, debug) {
    var canvas;
    canvas = $(selector)[0];
    cofgl.debugPanel = new cofgl.DebugPanel();
    cofgl.engine = new cofgl.Engine(canvas, debug);
    cofgl.resmgr = cofgl.makeDefaultResourceManager();
    cofgl.game = new Game;
    cofgl.game.run();
    return $("input[name='geometry']").change(function() {
      return cofgl.game.restart(this.value);
    });
  };

  $(document).ready(function() {
    var debug;
    debug = cofgl.getRuntimeParameter('debug') === '1';
    return initEngineAndGame('#viewport', debug);
  });

  root = self.cofgl != null ? self.cofgl : self.cofgl = {};

  root.game = null;

  root.geometries = null;

  root.debugPanel = null;

  root.resmgr = null;

  root.engine = null;

}).call(this);
