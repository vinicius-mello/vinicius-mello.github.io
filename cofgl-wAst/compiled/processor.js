// Generated by CoffeeScript 1.8.0
(function() {
  var Processor, makeQuadVBO, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  makeQuadVBO = function(texture) {
    var vbo;
    if (texture == null) {
      texture = null;
    }
    vbo = new cofgl.VertexBufferObject('TRIANGLES', 6);
    vbo.addBuffer('aVertexPosition', 3, [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0]);
    if (texture != null) {
      vbo.addBuffer('aTextureCoord', 2, texture.scaleCoords([1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0]));
    } else {
      vbo.addBuffer('aTextureCoord', 2, [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0]);
    }
    vbo.upload();
    return vbo;
  };

  Processor = (function(_super) {
    __extends(Processor, _super);

    Processor.withStack('processor');

    function Processor(shader, fbo) {
      if (fbo == null) {
        fbo = null;
      }
      this.shader = shader;
      if (fbo) {
        this.fbo = fbo;
        this.fboManaged = false;
      } else {
        this.fbo = new cofgl.FrameBufferObject;
        this.fboManaged = true;
      }
      this.vbo = makeQuadVBO(this.fbo.texture);
    }

    Processor.prototype.destroy = function() {
      if (this.fboManaged) {
        this.fbo.destroy();
      }
      return this.vbo.destroy();
    };

    Processor.prototype.bind = function() {
      return this.fbo.push();
    };

    Processor.prototype.unbind = function() {
      this.fbo.pop();
      return this.draw();
    };

    Processor.prototype.draw = function() {
      var gl;
      gl = cofgl.engine.gl;
      this.shader.push();
      gl.clearColor(1.0, 1.0, 1.0, 1.0);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      this.fbo.texture.push();
      this.vbo.draw();
      this.fbo.texture.pop();
      return this.shader.pop();
    };

    return Processor;

  })(cofgl.ContextObject);

  root = self.cofgl != null ? self.cofgl : self.cofgl = {};

  root.makeQuadVBO = makeQuadVBO;

  root.Processor = Processor;

}).call(this);
