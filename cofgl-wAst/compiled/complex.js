// Generated by CoffeeScript 1.8.0
(function() {
  var Complex, root;

  Complex = (function() {
    function Complex(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.magnitude = this.x * this.x + this.y * this.y;
    }

    Complex.prototype.plus = function(c2) {
      return new Complex(this.x + c2.x, this.y + c2.y);
    };

    Complex.prototype.minus = function(c2) {
      return new Complex(this.x - c2.x, this.y - c2.y);
    };

    Complex.prototype.times = function(c2) {
      return new Complex(this.x * c2.x - this.y * c2.y, this.x * c2.y + this.y * c2.x);
    };

    Complex.prototype.divide = function(c2) {
      return new Complex((this.x * c2.x + this.y * c2.y) / (c2.x * c2.x + c2.y * c2.y), (this.y * c2.x - this.x * c2.y) / (c2.x * c2.x + c2.y * c2.y));
    };

    Complex.prototype.negation = function() {
      return new Complex(-1 * this.x, -1 * this.y);
    };

    Complex.prototype.normalize = function() {
      this.magnitude = this.x * this.x + this.y * this.y;
      this.x = this.x / Math.sqrt(this.magnitude);
      this.y = this.y / Math.sqrt(this.magnitude);
      return this.magnitude = 1.0;
    };

    Complex.prototype.inverse = function() {
      if (this.magnitude === 0) {
        throw Error("no inverse");
      }
      return new Complex(this.x / this.magnitude, -1.0 * this.y / this.magnitude);
    };

    Complex.prototype.conjugate = function() {
      return new Complex(this.x, -1.0 * this.y);
    };

    Complex.prototype.toString = function() {
      if (this.y === 0) {
        return "" + this.x;
      }
      if (this.x === 0) {
        return "" + this.y + "i";
      }
      if (this.y > 0) {
        return "" + this.x + " + " + this.y + "i";
      } else {
        return "" + this.x + " - " + (-1.0 * this.y) + "i";
      }
    };

    return Complex;

  })();

  root = self.cofgl != null ? self.cofgl : self.cofgl = {};

  root.Complex = Complex;

}).call(this);
