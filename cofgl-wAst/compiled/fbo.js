// Generated by CoffeeScript 1.8.0
(function() {
  var FrameBufferObject, RenderBufferObject, checkFBO, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  checkFBO = function() {
    var gl, result;
    gl = cofgl.engine.gl;
    result = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    if (result !== gl.FRAMEBUFFER_COMPLETE) {
      throw 'Framebuffer problem: ' + WebGLDebugUtils.glEnumToString(result);
    }
  };

  RenderBufferObject = (function(_super) {
    __extends(RenderBufferObject, _super);

    RenderBufferObject.withStack('rbo');

    function RenderBufferObject(width, height, format) {
      var gl;
      gl = cofgl.engine.gl;
      this.format = gl[format];
      this.id = gl.createRenderbuffer();
      this.push();
      gl.renderbufferStorage(gl.RENDERBUFFER, this.format, width, height);
      this.pop();
    }

    RenderBufferObject.makeDepthBuffer = function(width, height) {
      return new RenderBufferObject(width, height, 'DEPTH_COMPONENT16');
    };

    RenderBufferObject.prototype.bind = function() {
      var gl;
      gl = cofgl.engine.gl;
      return gl.bindRenderbuffer(gl.RENDERBUFFER, this.id);
    };

    RenderBufferObject.prototype.unbind = function() {
      var gl;
      gl = cofgl.engine.gl;
      return gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    };

    return RenderBufferObject;

  })(cofgl.ContextObject);

  FrameBufferObject = (function(_super) {
    __extends(FrameBufferObject, _super);

    FrameBufferObject.withStack('fbo');

    function FrameBufferObject(width, height, options) {
      var gl, _ref, _ref1, _ref2;
      if (options == null) {
        options = {};
      }
      gl = cofgl.engine.gl;
      this.width = width != null ? width : cofgl.engine.width;
      this.height = height != null ? height : cofgl.engine.height;
      this.id = gl.createFramebuffer();
      this.texture = cofgl.Texture.fromSize(this.width, this.height, {
        flipY: false,
        mipmaps: false,
        forcePOT: (_ref = options.forcePOT) != null ? _ref : false,
        filtering: (_ref1 = options.filtering) != null ? _ref1 : 'NEAREST',
        clampToEdge: (_ref2 = options.clampToEdge) != null ? _ref2 : true,
        pushTexture: true
      });
      this.executeWithContext((function(_this) {
        return function() {
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, _this.texture.id, 0);
          _this.depthBuffer = RenderBufferObject.makeDepthBuffer(_this.width, _this.height);
          _this.attachRenderBuffer('DEPTH_ATTACHMENT', _this.depthBuffer);
          return checkFBO();
        };
      })(this));
      this.texture.pop();
    }

    FrameBufferObject.prototype.attachRenderBuffer = function(attachmentType, rbo) {
      return this.executeWithContext(function() {
        var gl, type;
        gl = cofgl.engine.gl;
        type = gl[attachmentType];
        return gl.framebufferRenderbuffer(gl.FRAMEBUFFER, type, gl.RENDERBUFFER, rbo.id);
      });
    };

    FrameBufferObject.prototype.bind = function() {
      var gl;
      gl = cofgl.engine.gl;
      return gl.bindFramebuffer(gl.FRAMEBUFFER, this.id);
    };

    FrameBufferObject.prototype.unbind = function() {
      var gl;
      gl = cofgl.engine.gl;
      return gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    };

    return FrameBufferObject;

  })(cofgl.ContextObject);

  root = self.cofgl != null ? self.cofgl : self.cofgl = {};

  root.RenderBufferObject = RenderBufferObject;

  root.FrameBufferObject = FrameBufferObject;

}).call(this);
