// Generated by CoffeeScript 1.8.0
(function() {
  var DebugPanel, Display, bench, getRuntimeParameter, parameters, root;

  Display = (function() {
    function Display(panel, name) {
      var row;
      this.panel = panel;
      row = $('<tr></tr>').appendTo(panel.element);
      this.keyElement = $('<th></th>').text(name).appendTo(row);
      this.valueElement = $('<td></td>').appendTo(row);
      this.setText('');
    }

    Display.prototype.setVisible = function(value) {
      if (value) {
        return this.element.show();
      } else {
        return this.element.hide();
      }
    };

    Display.prototype.setText = function(value) {
      return this.valueElement.text(value);
    };

    Display.prototype.getText = function() {
      return this.valueElement.text();
    };

    return Display;

  })();

  DebugPanel = (function() {
    function DebugPanel() {
      this.displays = {};
      this.element = $('<table id=debugpanel></table>').appendTo('body');
    }

    DebugPanel.prototype.addDisplay = function(name) {
      var _base;
      return (_base = this.displays)[name] != null ? _base[name] : _base[name] = new Display(this, name);
    };

    return DebugPanel;

  })();

  parameters = null;

  getRuntimeParameter = function(key, def) {
    var item, k, v, _i, _len, _ref, _ref1, _ref2;
    if (def == null) {
      def = null;
    }
    if (parameters == null) {
      parameters = {};
      _ref = window.location.search.substr(1).split('&');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _ref1 = item.split('=', 2), k = _ref1[0], v = _ref1[1];
        parameters[k] = v;
      }
    }
    return (_ref2 = parameters[key]) != null ? _ref2 : def;
  };

  bench = function(benchName, callback) {
    var display, name, now;
    name = "bench [" + benchName + "]";
    display = cofgl.debugPanel.addDisplay(name);
    now = Date.now();
    callback();
    return display.setText("" + ((Date.now() - now) / 1000) + "ms");
  };

  root = self.cofgl != null ? self.cofgl : self.cofgl = {};

  root.DebugPanel = DebugPanel;

  root.getRuntimeParameter = getRuntimeParameter;

  root.bench = bench;

}).call(this);
