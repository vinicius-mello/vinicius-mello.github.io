// Generated by CoffeeScript 1.8.0
(function() {
  var Camera, root;

  Camera = (function() {
    function Camera() {
      this.position = vec3.create();
      this.forward = vec3.create([0, 0, -1.0]);
      this.up = vec3.create([0.0, 1.0, 0.0]);
      this.fov = 45.0;
      this.near = 0.1;
      this.far = 400.0;
    }

    Camera.prototype.lookAt = function(vec) {
      vec3.subtract(vec, this.position, this.forward);
      return vec3.normalize(this.forward);
    };

    Camera.prototype.lookAtOrigin = function() {
      return this.lookAt([0.0, 0.0, 0.0]);
    };

    Camera.prototype.rotateScreenX = function(angle) {
      var rotmat;
      rotmat = mat4.identity();
      mat4.rotate(rotmat, -angle, this.up);
      mat4.multiplyVec3(rotmat, this.forward);
      return vec3.normalize(this.forward);
    };

    Camera.prototype.rotateScreenY = function(angle) {
      var cross, rotmat;
      cross = vec3.create();
      rotmat = mat4.identity();
      vec3.cross(this.up, this.forward, cross);
      mat4.rotate(rotmat, angle, cross);
      mat4.multiplyVec3(rotmat, this.forward);
      return vec3.normalize(this.forward);
    };

    Camera.prototype.rotateScreen = function(relx, rely) {
      if (relx) {
        this.rotateScreenX(relx);
      }
      if (rely) {
        return this.rotateScreenY(rely);
      }
    };

    Camera.prototype.moveForward = function(delta) {
      var vec;
      vec = vec3.create();
      vec3.scale(this.forward, delta, vec);
      return vec3.add(this.position, vec);
    };

    Camera.prototype.moveBackward = function(delta) {
      var vec;
      vec = vec3.create();
      vec3.scale(this.forward, delta, vec);
      return vec3.subtract(this.position, vec);
    };

    Camera.prototype.strafeLeft = function(delta) {
      var cross, vec;
      vec = vec3.create();
      cross = vec3.create();
      vec3.cross(this.up, this.forward, cross);
      vec3.normalize(cross);
      vec3.scale(cross, delta, vec);
      return vec3.add(this.position, vec);
    };

    Camera.prototype.strafeRight = function(delta) {
      var cross, vec;
      vec = vec3.create();
      cross = vec3.create();
      vec3.cross(this.up, this.forward, cross);
      vec3.normalize(cross);
      vec3.scale(cross, delta, vec);
      return vec3.subtract(this.position, vec);
    };

    Camera.prototype.apply = function() {
      var engine, mv, ref;
      engine = cofgl.engine;
      mv = mat4.create();
      ref = vec3.create(this.position);
      vec3.add(ref, this.forward);
      mat4.lookAt(this.position, ref, this.up, mv);
      engine.projection.set(mat4.perspective(this.fov, engine.aspect, this.near, this.far));
      return engine.view.set(mv);
    };

    return Camera;

  })();

  root = self.cofgl != null ? self.cofgl : self.cofgl = {};

  root.Camera = Camera;

}).call(this);
